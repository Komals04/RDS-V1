import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

# ... (the rest of your code remains unchanged)

def main():
    try:
        # Hardcode the desired AWS regions
        regions = ['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2']

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename = f'rds_insights_all_regions_{timestamp}.csv'

        fieldnames = [
            'DBIdentifier', 'Status', 'Role', 'Engine', 'Region', 'Size', 'CPU',
            'ProvisionedIOPS', 'StorageType', 'Multi-AZ', 'GlobalCluster',
            'InstanceType', 'PerformanceInsightsEnabled', 'PerformanceInsightsKMSKeyId',
            'PerformanceInsightsRetentionPeriod', 'ServerlessV2ScalingConfiguration',
            'AvailabilityZone', 'PreferredMaintenanceWindow', 'BackupRetentionPeriod',
            'MultiAZ', 'PubliclyAccessible', 'VpcSecurityGroups', 'DBSubnetGroupName',
            'ReadReplicaDBClusterIdentifiers',
            'DBClusterIdentifier', 'ClusterStatus', 'ClusterEngine', 'ClusterRegion',
        ]

        with open(filename, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for region in regions:
                rds_client = boto3.client('rds', region_name=region)

                response_instances = rds_client.describe_db_instances()
                instances = response_instances['DBInstances']

                response_clusters = rds_client.describe_db_clusters()
                clusters = response_clusters['DBClusters']

                for instance in instances:
                    insights = get_rds_insights(rds_client, instance['DBInstanceIdentifier'])
                    if insights:
                        writer.writerow(insights)
                        print(f"Exported details for RDS instance: {insights['DBIdentifier']} in region {region}")

                for cluster in clusters:
                    cluster_info = get_db_cluster_info(rds_client, cluster['DBClusterIdentifier'])
                    if cluster_info:
                        writer.writerow(cluster_info)
                        print(f"Exported details for RDS cluster: {cluster_info['DBClusterIdentifier']} in region {region}")

            print(f'Completed checking and exporting RDS insights to {filename} for all regions.')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
