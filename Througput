import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

def extract_core_count(processor_features):
    for feature in processor_features:
        if feature.get('Name') == 'coreCount':
            return feature.get('Value', 'Not Configured')
    return 'Not Configured'

def flatten_tags(tag_list):
    logical_id_tag = next((tag for tag in tag_list if tag['Key'] == 'aws:cloudformation:logical-id'), None)
    logical_id = logical_id_tag['Value'] if logical_id_tag else 'Not Configured'
    return {'LogicalId': logical_id}

def flatten_nested_attributes(items):
    return [
        {f"{k}_{sub_k}": sub_v for sub_k, sub_v in item.items()}
        for k, v in items[0].items()
        for item in items
    ] if items else []

def get_instance_configuration(rds_client, db_instance, account_id, account_name):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]

        processor_features = instance.get('ProcessorFeatures', [])
        core_count = extract_core_count(processor_features)

        # Fetch vCPU information
        # vcpu = instance.get('vCPU', 'Not Configured')  # Remove vCPU

        # Extracting the specific tag key "aws:cloudformation:logical-id"
        tags = instance.get('TagList', [])
        flattened_tags = flatten_tags(tags)

        instance_configuration = {
            'DBIdentifier': instance['DBInstanceIdentifier'],
            'Status': instance['DBInstanceStatus'],
            'Role': get_role_information(rds_client, db_instance),
            'Engine': instance['Engine'],
            'Region': rds_client.meta.region_name,
            'Size': instance['DBInstanceClass'],
            'CPU': instance['AllocatedStorage'],
            'ProvisionedIOPS': instance.get('Iops', 'Not Configured'),
            'StorageType': instance.get('StorageType', 'Not Configured'),
            'NetworkType': instance.get('StorageType', 'Not Configured'),  # Added NetworkType
            # 'StorageThroughput': instance.get('Throughput', 'Not Configured'),  # Remove StorageThroughput
            'Multi-AZ': instance.get('MultiAZ', 'Not Configured'),
            'GlobalCluster': instance.get('GlobalClusterIdentifier', None),
            'InstanceType': instance.get('DBInstanceClass', 'Not Configured'),
            'PerformanceInsightsEnabled': instance.get('PerformanceInsights', {}).get('Enabled', 'Not Configured'),
            # 'PerformanceInsightsKMSKeyId': instance.get('PerformanceInsights', {}).get('KMSKeyId', 'Not Configured'),  # Remove PerformanceInsightsKMSKeyId
            'PerformanceInsightsRetentionPeriod': instance.get('PerformanceInsights', {}).get('RetentionPeriod', 'Not Configured'),
            'ServerlessV2ScalingConfiguration': instance.get('ServerlessV2ScalingConfiguration', 'Not Configured'),
            'AvailabilityZone': instance.get('AvailabilityZone', 'Not Configured'),
            'PreferredMaintenanceWindow': instance.get('PreferredMaintenanceWindow', 'Not Configured'),
            'BackupRetentionPeriod': instance.get('BackupRetentionPeriod', 'Not Configured'),
            'MultiAZ': instance.get('MultiAZ', 'Not Configured'),
            'PubliclyAccessible': instance.get('PubliclyAccessible', 'Not Configured'),
            'VpcSecurityGroups': [group['VpcSecurityGroupId'] for group in instance.get('VpcSecurityGroups', [])],
            'DBSubnetGroupName': instance.get('DBSubnetGroup', {}).get('DBSubnetGroupName', 'Not Configured'),
            'ReadReplicaDBClusterIdentifiers': instance.get('ReadReplicaDBClusterIdentifiers', []),
            'ProcessorFeatures': processor_features,
            'CoreCount': core_count,
            # 'vCPU': vcpu,  # Remove vCPU
            'AccountId': account_id,  # Add AccountId
            'AccountName': account_name,  # Add AccountName
            **flattened_tags,  # Include flattened tags for instances
            # ... (more attributes)
        }

        if 'Provisioned IOPS' in instance_configuration['InstanceType']:
            instance_configuration['MaximumCapacity'] = str(instance.get('Iops', 'Not Configured'))

        return instance_configuration
    except ClientError as e:
        print(f"Error retrieving instance configuration for RDS instance {db_instance}: {e}")
        return None

def get_role_information(rds_client, db_instance):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]

        global_cluster_identifier = instance.get('GlobalClusterIdentifier', None)
        db_cluster_role = instance.get('DBClusterRole', None)

        if global_cluster_identifier:
            if db_cluster_role == 'WRITER':
                return 'Writer Instance'
            elif db_cluster_role == 'READER':
                return 'Reader Instance'
            else:
                return 'Role not determined'
        else:
            return 'Standalone Instance'
    except ClientError as e:
        print(f"Error retrieving role information for RDS instance {db_instance}: {e}")
        return None

# ... (existing code)

def main():
    try:
        regions = ['us-east-1', 'us-east-2']  # Hardcoded regions

        # Initialize an STS client
        sts_client = boto3.client('sts')

        # Fetch the account ID and account name
        account_id = sts_client.get_caller_identity().get('Account')
        account_name = boto3.client('iam').list_account_aliases()['AccountAliases'][0]

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        instance_filename = f'rds_insights_instances_{timestamp}.csv'  # CSV file for RDS instances
        cluster_filename = f'rds_insights_clusters_{timestamp}.csv'  # CSV file for RDS clusters

        # ... (existing code)

        for instance in instances:
            insights = get_rds_insights(rds_client, instance['DBInstanceIdentifier'], account_id, account_name)
            if insights:
                instance_writer.writerow(insights)
                print(f"Exported details for RDS instance: {insights['DBIdentifier']} in region {region}")

        # ... (existing code)
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
