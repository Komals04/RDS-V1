import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

# Replace 'your-region' with your AWS region
region = 'us-east-2'

rds_client = boto3.client('rds', region_name=region, proxies={'http': 'http://proxy_address:proxy_port', 'https': 'http://proxy_address:proxy_port'})

def extract_db_details(db_instance):
    db_identifier = db_instance.get('DBInstanceIdentifier', 'Not Configured')
    
    db_details = {
        'DBIdentifier': db_identifier,
        'Status': db_instance.get('DBInstanceStatus', 'Not Configured'),
        'Role': 'Not Configured',  # Role information is not directly available in describe_db_instances
        'Engine': db_instance.get('Engine', 'Not Configured'),
        'Region': region,
        'Size': str(db_instance.get('AllocatedStorage', 'Not Configured')),
        'CPU': str(db_instance.get('DBInstanceClass', 'Not Configured')),
    }

    return db_details

def get_rds_instances():
    try:
        response = rds_client.describe_db_instances()
        return response['DBInstances']
    except ClientError as e:
        print(f"Error retrieving RDS instances: {e}")
        return []

def get_rds_insights(client, db_identifier):
    # Additional logic to fetch 'Role' information if available
    try:
        response = client.list_tags_for_resource(ResourceName=f"arn:aws:rds:{region}:your-account-id:db:{db_identifier}")
        tags = response.get('TagList', [])
        role_tag = next((tag for tag in tags if tag['Key'] == 'Role'), None)
        role = role_tag['Value'] if role_tag else 'Not Configured'
    except ClientError as e:
        print(f"Error retrieving tags for RDS instance {db_identifier}: {e}")
        role = 'Not Configured'

    insights = extract_db_details(instance)
    insights['Role'] = role

    return insights

def process_rds_instance(instance):
    insights = get_rds_insights(rds_client, instance['DBInstanceIdentifier'])

    with csv_lock:
        writer.writerow(insights)

    print(f"Exported details for RDS instance: {insights['DBIdentifier']}")

def main():
    try:
        rds_client = boto3.client('rds', region_name=region)
        
        instances = get_rds_instances()

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename = f'rds_insights_{timestamp}.csv'

        fieldnames = [
            'DBIdentifier', 'Status', 'Role', 'Engine', 'Region', 'Size', 'CPU',
        ]

        with open(filename, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            with ThreadPoolExecutor() as executor:
                executor.map(process_rds_instance, instances)

        print(f'Completed checking and exporting RDS insights to {filename}.')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
