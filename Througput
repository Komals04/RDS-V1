import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

def get_rds_insights(rds_client, db_instance):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]
        
        insights = {
            'DBIdentifier': instance['DBInstanceIdentifier'],
            'Status': instance['DBInstanceStatus'],
            'Role': instance['IAMDatabaseAuthenticationEnabled'],
            'Engine': instance['Engine'],
            'Region': rds_client.meta.region_name,
            'Size': instance['DBInstanceClass'],
            'CPU': instance['AllocatedStorage'],
            'Storage': instance.get('AllocatedStorage', 'Not Configured'),
            'ProvisionedIOPS': instance.get('Iops', 'Not Configured'),
            'StorageType': instance.get('StorageType', 'Not Configured'),
            'MultiAZ': instance.get('MultiAZ', 'Not Configured'),
        }
        
        return insights
    except ClientError as e:
        print(f"Error retrieving insights for RDS instance {db_instance}: {e}")
        return None

def main():
    try:
        # Replace 'your-region' with your AWS region
        region = 'us-east-2'
        rds_client = boto3.client('rds', region_name=region)
        
        instances = rds_client.describe_db_instances()['DBInstances']

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename = f'rds_insights_{timestamp}.csv'

        fieldnames = [
            'DBIdentifier', 'Status', 'Role', 'Engine', 'Region', 'Size', 'CPU',
            'Storage', 'ProvisionedIOPS', 'StorageType', 'MultiAZ',
        ]

        with open(filename, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for instance in instances:
                insights = get_rds_insights(rds_client, instance['DBInstanceIdentifier'])
                if insights:
                    writer.writerow(insights)
                    print(f"Exported details for RDS instance: {insights['DBIdentifier']}")

        print(f'Completed checking and exporting RDS insights to {filename}.')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
