import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

def extract_core_count(processor_features):
    for feature in processor_features:
        if feature.get('Name') == 'coreCount':
            return feature.get('Value', 'Not Configured')
    return 'Not Configured'

def flatten_dict(d):
    flattened = {}
    for key, value in d.items():
        if isinstance(value, dict):
            flattened.update(flatten_dict({f"{key}_{k}": v for k, v in value.items()}))
        else:
            flattened[key] = value
    return flattened

def get_instance_configuration(rds_client, db_instance):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]

        processor_features = instance.get('ProcessorFeatures', [])
        core_count = extract_core_count(processor_features)
        
        # Fetch vCPU information
        vcpu = instance.get('vCPU', 'Not Configured')

        instance_configuration = {
            'InstanceType': instance.get('DBInstanceClass', 'Not Configured'),
            'PerformanceInsightsEnabled': instance.get('PerformanceInsights', {}).get('Enabled', 'Not Configured'),
            'PerformanceInsightsKMSKeyId': instance.get('PerformanceInsights', {}).get('KMSKeyId', 'Not Configured'),
            'PerformanceInsightsRetentionPeriod': instance.get('PerformanceInsights', {}).get('RetentionPeriod', 'Not Configured'),
            'ServerlessV2ScalingConfiguration': instance.get('ServerlessV2ScalingConfiguration', 'Not Configured'),
            'AvailabilityZone': instance.get('AvailabilityZone', 'Not Configured'),
            'PreferredMaintenanceWindow': instance.get('PreferredMaintenanceWindow', 'Not Configured'),
            'BackupRetentionPeriod': instance.get('BackupRetentionPeriod', 'Not Configured'),
            'MultiAZ': instance.get('MultiAZ', 'Not Configured'),
            'PubliclyAccessible': instance.get('PubliclyAccessible', 'Not Configured'),
            'VpcSecurityGroups': [group['VpcSecurityGroupId'] for group in instance.get('VpcSecurityGroups', [])],
            'DBSubnetGroupName': instance.get('DBSubnetGroup', {}).get('DBSubnetGroupName', 'Not Configured'),
            'ReadReplicaDBClusterIdentifiers': instance.get('ReadReplicaDBClusterIdentifiers', []),
            'ProcessorFeatures': processor_features,
            'CoreCount': core_count,
            'vCPU': vcpu,  # Added vCPU to instance_configuration
        }

        if 'Provisioned IOPS' in instance_configuration['InstanceType']:
            instance_configuration['MaximumCapacity'] = str(instance.get('Iops', 'Not Configured'))

        return flatten_dict(instance_configuration)
    except ClientError as e:
        print(f"Error retrieving instance configuration for RDS instance {db_instance}: {e}")
        return None

def flatten_cluster_member(member):
    return {
        'DBInstanceIdentifier': member['DBInstanceIdentifier'],
        'IsClusterWriter': member.get('IsClusterWriter', 'Not Configured'),
        'DBClusterParameterGroupStatus': member.get('DBClusterParameterGroupStatus', 'Not Configured'),
        'PromotionTier': member.get('PromotionTier', 'Not Configured')
    }

def flatten_vpc_security_group(group):
    return {
        'VpcSecurityGroupId': group['VpcSecurityGroupId'],
        'Status': group.get('Status', 'Not Configured')
    }

def flatten_associated_role(role):
    return {
        'RoleArn': role['RoleArn'],
        'Status': role.get('Status', 'Not Configured'),
        'FeatureName': role.get('FeatureName', 'Not Configured')
    }

def flatten_domain_membership(domain_membership):
    return domain_membership

def flatten_tag_list(tag_list):
    return tag_list

def flatten_scaling_configuration_info(scaling_info):
    return scaling_info

def get_db_cluster_info(rds_client, db_cluster_identifier):
    try:
        response = rds_client.describe_db_clusters(DBClusterIdentifier=db_cluster_identifier)
        db_cluster = response['DBClusters'][0]

        cluster_info = {
            'DBClusterIdentifier': db_cluster['DBClusterIdentifier'],
            'ClusterStatus': db_cluster['Status'],
            'ClusterEngine': db_cluster['Engine'],
            'ClusterRegion': rds_client.meta.region_name,
            'AllocatedStorage': db_cluster.get('AllocatedStorage', 'Not Configured'),
            'AvailabilityZones': db_cluster.get('AvailabilityZones', []),
            'BackupRetentionPeriod': db_cluster.get('BackupRetentionPeriod', 'Not Configured'),
            'CharacterSetName': db_cluster.get('CharacterSetName', 'Not Configured'),
            'DatabaseName': db_cluster.get('DatabaseName', 'Not Configured'),

            'DBClusterMembers': [flatten_cluster_member(member) for member in db_cluster.get('DBClusterMembers', [])],
            'VpcSecurityGroups': [flatten_vpc_security_group(group) for group in db_cluster.get('VpcSecurityGroups', [])],
            'AssociatedRoles': [flatten_associated_role(role) for role in db_cluster.get('AssociatedRoles', [])],
            'DomainMemberships': [flatten_domain_membership(domain_membership) for domain_membership in db_cluster.get('DomainMemberships', [])],
            'TagList': flatten_tag_list(db_cluster.get('TagList', [])),
            'ScalingConfigurationInfo': flatten_scaling_configuration_info(db_cluster.get('ScalingConfigurationInfo', {})),

            # Add more attributes from describe_db_clusters response as needed

        }

        return flatten_dict(cluster_info)
    except ClientError as e:
        print(f"Error retrieving information for RDS cluster {db_cluster_identifier}: {e}")
        return None

def main():
    try:
        regions = ['us-east-1', 'us-east-2']  # Hardcoded regions

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename = f'rds_insights_combined_{timestamp}.csv'  # Single CSV file for both regions

        fieldnames = [
            'DBIdentifier', 'Status', 'Role', 'Engine', 'Region', 'Size', 'CPU', 'vCPU',
            'ProvisionedIOPS', 'StorageType', 'Multi-AZ', 'GlobalCluster',
            'InstanceType', 'PerformanceInsightsEnabled', 'PerformanceInsightsKMSKeyId',
            'PerformanceInsightsRetentionPeriod', 'ServerlessV2ScalingConfiguration',
            'AvailabilityZone', 'PreferredMaintenanceWindow', 'BackupRetentionPeriod',
            'MultiAZ', 'PubliclyAccessible', 'VpcSecurityGroups', 'DBSubnetGroupName',
            'ReadReplicaDBClusterIdentifiers', 'ProcessorFeatures', 'CoreCount',
            'DBClusterIdentifier', 'ClusterStatus', 'ClusterEngine', 'ClusterRegion',
            'AllocatedStorage', 'AvailabilityZones', 'BackupRetentionPeriod', 'CharacterSetName', 'DatabaseName',

            # Add more attributes from describe_db_clusters response as needed

            'DBClusterMembers_DBInstanceIdentifier', 'DBClusterMembers_IsClusterWriter', 'DBClusterMembers_DBClusterParameterGroupStatus', 'DBClusterMembers_PromotionTier',
            'VpcSecurityGroups_VpcSecurityGroupId', 'VpcSecurityGroups_Status',
            'AssociatedRoles_RoleArn', 'AssociatedRoles_Status', 'AssociatedRoles_FeatureName',
            'DomainMemberships_Domain', 'DomainMemberships_Status', 'DomainMemberships_FQDN', 'DomainMemberships_IAMRoleName', 'DomainMemberships_OU', 'DomainMemberships_AuthSecretArn', 'DomainMemberships_DnsIps',
            'TagList_Key', 'TagList_Value',
            'ScalingConfigurationInfo_MinCapacity', 'ScalingConfigurationInfo_MaxCapacity', 'ScalingConfigurationInfo_AutoPause', 'ScalingConfigurationInfo_SecondsUntilAutoPause', 'ScalingConfigurationInfo_TimeoutAction', 'ScalingConfigurationInfo_SecondsBeforeTimeout',

            # ... (more attributes)

        ]

        with open(filename, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for region in regions:
                rds_client = boto3.client('rds', region_name=region)
                
                response_instances = rds_client.describe_db_instances()
                instances = response_instances['DBInstances']

                response_clusters = rds_client.describe_db_clusters()
                clusters = response_clusters['DBClusters']

                for instance in instances:
                    insights = get_rds_insights(rds_client, instance['DBInstanceIdentifier'])
                    if insights:
                        writer.writerow(insights)
                        print(f"Exported details for RDS instance: {insights['DBIdentifier']} in region {region}")

                for cluster in clusters:
                    cluster_info = get_db_cluster_info(rds_client, cluster['DBClusterIdentifier'])
                    if cluster_info:
                        writer.writerow(cluster_info)
                        print(f"Exported details for RDS cluster: {cluster_info['DBClusterIdentifier']} in region {region}")

            print(f'Completed checking and exporting RDS insights to {filename} for both regions.')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
