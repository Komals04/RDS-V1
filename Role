import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

def extract_core_count(processor_features):
    for feature in processor_features:
        if feature.get('Name') == 'coreCount':
            return feature.get('Value', 'Not Configured')
    return 'Not Configured'

def get_instance_configuration(rds_client, db_instance):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]

        processor_features = instance.get('ProcessorFeatures', [])
        core_count = extract_core_count(processor_features)
        
        # Fetch vCPU information
        vcpu = instance.get('vCPU', 'Not Configured')

        instance_configuration = {
            'InstanceType': instance.get('DBInstanceClass', 'Not Configured'),
            'PerformanceInsightsEnabled': instance.get('PerformanceInsights', {}).get('Enabled', 'Not Configured'),
            'PerformanceInsightsKMSKeyId': instance.get('PerformanceInsights', {}).get('KMSKeyId', 'Not Configured'),
            'PerformanceInsightsRetentionPeriod': instance.get('PerformanceInsights', {}).get('RetentionPeriod', 'Not Configured'),
            'ServerlessV2ScalingConfiguration': instance.get('ServerlessV2ScalingConfiguration', 'Not Configured'),
            'AvailabilityZone': instance.get('AvailabilityZone', 'Not Configured'),
            'PreferredMaintenanceWindow': instance.get('PreferredMaintenanceWindow', 'Not Configured'),
            'BackupRetentionPeriod': instance.get('BackupRetentionPeriod', 'Not Configured'),
            'MultiAZ': instance.get('MultiAZ', 'Not Configured'),
            'PubliclyAccessible': instance.get('PubliclyAccessible', 'Not Configured'),
            'VpcSecurityGroups': [group['VpcSecurityGroupId'] for group in instance.get('VpcSecurityGroups', [])],
            'DBSubnetGroupName': instance.get('DBSubnetGroup', {}).get('DBSubnetGroupName', 'Not Configured'),
            'ReadReplicaDBClusterIdentifiers': instance.get('ReadReplicaDBClusterIdentifiers', []),
            'ProcessorFeatures': processor_features,
            'CoreCount': core_count,
            'vCPU': vcpu,  # Added vCPU to instance_configuration
        }

        if 'Provisioned IOPS' in instance_configuration['InstanceType']:
            instance_configuration['MaximumCapacity'] = str(instance.get('Iops', 'Not Configured'))

        return instance_configuration
    except ClientError as e:
        print(f"Error retrieving instance configuration for RDS instance {db_instance}: {e}")
        return None

def get_role_information(rds_client, db_instance):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]

        global_cluster_identifier = instance.get('GlobalClusterIdentifier', None)
        db_cluster_role = instance.get('DBClusterRole', None)

        if global_cluster_identifier:
            if db_cluster_role == 'WRITER':
                return 'Writer Instance'
            elif db_cluster_role == 'READER':
                return 'Reader Instance'
            else:
                return 'Role not determined'
        else:
            return 'Standalone Instance'
    except ClientError as e:
        print(f"Error retrieving role information for RDS instance {db_instance}: {e}")
        return None

def get_rds_insights(rds_client, db_instance):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]

        global_cluster_identifier = instance.get('GlobalClusterIdentifier', None)

        role_info = get_role_information(rds_client, db_instance)

        insights = {
            'DBIdentifier': instance['DBInstanceIdentifier'],
            'Status': instance['DBInstanceStatus'],
            'Role': role_info,
            'Engine': instance['Engine'],
            'Region': rds_client.meta.region_name,
            'Size': instance['DBInstanceClass'],
            'CPU': instance['AllocatedStorage'],
            'ProvisionedIOPS': instance.get('Iops', 'Not Configured'),
            'StorageType': instance.get('StorageType', 'Not Configured'),
            'Multi-AZ': instance.get('MultiAZ', 'Not Configured'),
            'GlobalCluster': global_cluster_identifier,
        }

        instance_configuration = get_instance_configuration(rds_client, db_instance)
        insights.update(instance_configuration)

        return insights
    except ClientError as e:
        print(f"Error retrieving insights for RDS instance {db_instance}: {e}")
        return None

def get_db_cluster_info(rds_client, db_cluster_identifier):
    try:
        response = rds_client.describe_db_clusters(DBClusterIdentifier=db_cluster_identifier)
        db_cluster = response['DBClusters'][0]

        cluster_info = {
            'DBClusterIdentifier': db_cluster['DBClusterIdentifier'],
            'ClusterStatus': db_cluster['Status'],
            'ClusterEngine': db_cluster['Engine'],
            'ClusterRegion': rds_client.meta.region_name,
            'AllocatedStorage': db_cluster.get('AllocatedStorage', 'Not Configured'),
            'AvailabilityZones': db_cluster.get('AvailabilityZones', []),
            'BackupRetentionPeriod': db_cluster.get('BackupRetentionPeriod', 'Not Configured'),
            'CharacterSetName': db_cluster.get('CharacterSetName', 'Not Configured'),
            'DatabaseName': db_cluster.get('DatabaseName', 'Not Configured'),

            # Add more attributes from the describe_db_clusters response as needed

            'DBClusterMembers': [
                {
                    'DBInstanceIdentifier': member['DBInstanceIdentifier'],
                    'IsClusterWriter': member.get('IsClusterWriter', 'Not Configured'),
                    'DBClusterParameterGroupStatus': member.get('DBClusterParameterGroupStatus', 'Not Configured'),
                    'PromotionTier': member.get('PromotionTier', 'Not Configured')
                } for member in db_cluster.get('DBClusterMembers', [])
            ],

            'VpcSecurityGroups': [
                {
                    'VpcSecurityGroupId': group['VpcSecurityGroupId'],
                    'Status': group.get('Status', 'Not Configured')
                } for group in db_cluster.get('VpcSecurityGroups', [])
            ],

            'AssociatedRoles': [
                {
                    'RoleArn': role['RoleArn'],
                    'Status': role.get('Status', 'Not Configured'),
                    'FeatureName': role.get('FeatureName', 'Not Configured')
                } for role in db_cluster.get('AssociatedRoles', [])
            ],

            'DomainMemberships': db_cluster.get('DomainMemberships', []),

            'TagList': db_cluster.get('TagList', []),

            'ScalingConfigurationInfo': db_cluster.get('ScalingConfigurationInfo', {}),

            # ... (more attributes)

        }

        return cluster_info
    except ClientError as e:
        print(f"Error retrieving information for RDS cluster {db_cluster_identifier}: {e}")
        return None

def main():
    try:
        regions = ['us-east-1', 'us-east-2']  # Hardcoded regions

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename = f'rds_insights_combined_{timestamp}.csv'  # Single CSV file for both regions

        fieldnames = [
            'DBIdentifier', 'Status', 'Role', 'Engine', 'Region', 'Size', 'CPU', 'vCPU',
            'ProvisionedIOPS', 'StorageType', 'Multi-AZ', 'GlobalCluster',
            'InstanceType', 'PerformanceInsightsEnabled', 'PerformanceInsightsKMSKeyId',
            'PerformanceInsightsRetentionPeriod', 'ServerlessV2ScalingConfiguration',
            'AvailabilityZone', 'PreferredMaintenanceWindow', 'BackupRetentionPeriod',
            'MultiAZ', 'PubliclyAccessible', 'VpcSecurityGroups', 'DBSubnetGroupName',
            'ReadReplicaDBClusterIdentifiers', 'ProcessorFeatures', 'CoreCount',
            'DBClusterIdentifier', 'ClusterStatus', 'ClusterEngine', 'ClusterRegion',
            'AllocatedStorage', 'AvailabilityZones', 'BackupRetentionPeriod', 'CharacterSetName', 'DatabaseName',

            # Add more attributes from describe_db_clusters response as needed

            'DBClusterMembers', 'VpcSecurityGroups', 'AssociatedRoles', 'DomainMemberships', 'TagList', 'ScalingConfigurationInfo',

            # ... (more attributes)

        ]

        with open(filename, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for region in regions:
                rds_client = boto3.client('rds', region_name=region)
                
                response_instances = rds_client.describe_db_instances()
                instances = response_instances['DBInstances']

                response_clusters = rds_client.describe_db_clusters()
                clusters = response_clusters['DBClusters']

                for instance in instances:
                    insights = get_rds_insights(rds_client, instance['DBInstanceIdentifier'])
                    if insights:
                        writer.writerow(insights)
                        print(f"Exported details for RDS instance: {insights['DBIdentifier']} in region {region}")

                for cluster in clusters:
                    cluster_info = get_db_cluster_info(rds_client, cluster['DBClusterIdentifier'])
                    if cluster_info:
                        writer.writerow(cluster_info)
                        print(f"Exported details for RDS cluster: {cluster_info['DBClusterIdentifier']} in region {region}")

            print(f'Completed checking and exporting RDS insights to {filename} for both regions.')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()





[{'DBInstanceIdentifier': 'packse00p', 'IsClusterWriter': False, 'DBClusterParameterGroupStatus': 'in-sync', 'PromotionTier': 1}, {'DBInstanceIdentifier': 'packse00r00', 'IsClusterWriter': True, 'DBClusterParameterGroupStatus': 'in-sync', 'PromotionTier': 1}]
