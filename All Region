import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

def get_instance_configuration(rds_client, db_instance):
    # ... (unchanged)

def get_role_information(rds_client, db_instance):
    # ... (unchanged)

def get_rds_insights(rds_client, db_instance):
    # ... (unchanged)

def get_db_cluster_info(rds_client, db_cluster_identifier):
    # ... (unchanged)

def main():
    try:
        # Get all available AWS regions for RDS
        session = boto3.Session()
        regions = [region['RegionName'] for region in session.get_available_regions('rds')]

        consolidated_data = []

        for region in regions:
            rds_client = boto3.client('rds', region_name=region)
            
            response_instances = rds_client.describe_db_instances()
            instances = response_instances['DBInstances']

            try:
                response_clusters = rds_client.describe_db_clusters()
                clusters = response_clusters['DBClusters']
            except ClientError as e:
                print(f"Error retrieving RDS clusters in region {region}: {e}")
                clusters = []

            for instance in instances:
                insights = get_rds_insights(rds_client, instance['DBInstanceIdentifier'])
                if insights:
                    consolidated_data.append(insights)

            for cluster in clusters:
                cluster_info = get_db_cluster_info(rds_client, cluster['DBClusterIdentifier'])
                if cluster_info:
                    consolidated_data.append(cluster_info)

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        consolidated_filename = f'rds_insights_all_regions_{timestamp}.csv'

        fieldnames = [
            'DBIdentifier', 'Status', 'Role', 'Engine', 'Region', 'Size', 'CPU',
            'Storage', 'ProvisionedIOPS', 'StorageType', 'Multi-AZ', 'VPC', 'GlobalCluster',
            'InstanceType', 'MaximumCapacity', 'MinimumCapacity',
            'PerformanceInsightsEnabled', 'PerformanceInsightsKMSKeyId', 'PerformanceInsightsRetentionPeriod',
            'ServerlessV2ScalingConfiguration', 'AvailabilityZone', 'PreferredMaintenanceWindow',
            'BackupRetentionPeriod', 'MultiAZ', 'PubliclyAccessible', 'VpcSecurityGroups', 'DBSubnetGroupName',
            'ReadReplicaDBClusterIdentifiers',
            'DBClusterIdentifier', 'ClusterStatus', 'ClusterEngine', 'ClusterRegion',
        ]

        with open(consolidated_filename, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for data in consolidated_data:
                writer.writerow(data)
            
        print(f'Completed checking and exporting consolidated RDS insights to {consolidated_filename}.')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
