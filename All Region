import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

def get_instance_configuration(rds_client, db_instance):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]

        instance_configuration = {
            'InstanceType': instance.get('DBInstanceClass', 'Not Configured'),
            'MaximumCapacity': str(instance.get('AllocatedStorage', 'Not Configured')),
            'MinimumCapacity': str(instance.get('AllocatedStorage', 'Not Configured')),
            'PerformanceInsightsEnabled': instance.get('PerformanceInsights', {}).get('Enabled', 'Not Configured'),
            'PerformanceInsightsKMSKeyId': instance.get('PerformanceInsights', {}).get('KMSKeyId', 'Not Configured'),
            'PerformanceInsightsRetentionPeriod': instance.get('PerformanceInsights', {}).get('RetentionPeriod', 'Not Configured'),
            'ServerlessV2ScalingConfiguration': instance.get('ServerlessV2ScalingConfiguration', 'Not Configured'),
            'AvailabilityZone': instance.get('AvailabilityZone', 'Not Configured'),
            'PreferredMaintenanceWindow': instance.get('PreferredMaintenanceWindow', 'Not Configured'),
            'BackupRetentionPeriod': instance.get('BackupRetentionPeriod', 'Not Configured'),
            'MultiAZ': instance.get('MultiAZ', 'Not Configured'),
            'PubliclyAccessible': instance.get('PubliclyAccessible', 'Not Configured'),
            'VpcSecurityGroups': [group['VpcSecurityGroupId'] for group in instance.get('VpcSecurityGroups', [])],
            'DBSubnetGroupName': instance.get('DBSubnetGroup', {}).get('DBSubnetGroupName', 'Not Configured'),
            'ReadReplicaDBClusterIdentifiers': instance.get('ReadReplicaDBClusterIdentifiers', []),
            # Add more attributes as needed
        }

        # Check if the instance is provisioned with IOPS
        if 'Provisioned IOPS' in instance_configuration['InstanceType']:
            instance_configuration['MaximumCapacity'] = str(instance.get('Iops', 'Not Configured'))

        return instance_configuration
    except ClientError as e:
        print(f"Error retrieving instance configuration for RDS instance {db_instance}: {e}")
        return None

def get_role_information(rds_client, db_instance):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]

        global_cluster_identifier = instance.get('GlobalClusterIdentifier', None)
        db_cluster_role = instance.get('DBClusterRole', None)

        if global_cluster_identifier:
            if db_cluster_role == 'WRITER':
                return 'Writer Instance'
            elif db_cluster_role == 'READER':
                return 'Reader Instance'
            else:
                return 'Role not determined'
        else:
            return 'Standalone Instance'
    except ClientError as e:
        print(f"Error retrieving role information for RDS instance {db_instance}: {e}")
        return None

def get_rds_insights(rds_client, db_instance):
    try:
        response = rds_client.describe_db_instances(DBInstanceIdentifier=db_instance)
        instance = response['DBInstances'][0]

        global_cluster_identifier = instance.get('GlobalClusterIdentifier', None)

        role_info = get_role_information(rds_client, db_instance)

        insights = {
            'DBIdentifier': instance['DBInstanceIdentifier'],
            'Status': instance['DBInstanceStatus'],
            'Role': role_info,
            'Engine': instance['Engine'],
            'Region': rds_client.meta.region_name,
            'Size': instance['DBInstanceClass'],
            'CPU': instance['AllocatedStorage'],
            'Storage': instance.get('AllocatedStorage', 'Not Configured'),
            'ProvisionedIOPS': instance.get('Iops', 'Not Configured'),
            'StorageType': instance.get('StorageType', 'Not Configured'),
            'Multi-AZ': instance.get('MultiAZ', 'Not Configured'),
            'VPC': instance.get('DBSubnetGroups', [{}])[0].get('VpcId', 'Not Configured'),
            'GlobalCluster': global_cluster_identifier,
        }

        instance_configuration = get_instance_configuration(rds_client, db_instance)
        insights.update(instance_configuration)

        return insights
    except ClientError as e:
        print(f"Error retrieving insights for RDS instance {db_instance}: {e}")
        return None

def get_db_cluster_info(rds_client, db_cluster_identifier):
    try:
        response = rds_client.describe_db_clusters(DBClusterIdentifier=db_cluster_identifier)
        db_cluster = response['DBClusters'][0]

        cluster_info = {
            'DBClusterIdentifier': db_cluster['DBClusterIdentifier'],
            'ClusterStatus': db_cluster['Status'],
            'ClusterEngine': db_cluster['Engine'],
            'ClusterRegion': rds_client.meta.region_name,
            # Add more attributes as needed
        }

        return cluster_info
    except ClientError as e:
        print(f"Error retrieving information for RDS cluster {db_cluster_identifier}: {e}")
        return None

def main():
    try:
        # Get all available AWS regions for RDS
        session = boto3.Session()
        regions = [region['RegionName'] for region in session.get_available_regions('rds')]

        consolidated_data = []

        for region in regions:
            rds_client = boto3.client('rds', region_name=region)
            
            response_instances = rds_client.describe_db_instances()
            instances = response_instances['DBInstances']

            try:
                response_clusters = rds_client.describe_db_clusters()
                clusters = response_clusters['DBClusters']
            except ClientError as e:
                print(f"Error retrieving RDS clusters in region {region}: {e}")
                clusters = []

            for instance in instances:
                insights = get_rds_insights(rds_client, instance['DBInstanceIdentifier'])
                if insights:
                    consolidated_data.append(insights)

            for cluster in clusters:
                cluster_info = get_db_cluster_info(rds_client, cluster['DBClusterIdentifier'])
                if cluster_info:
                    consolidated_data.append(cluster_info)

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        consolidated_filename = f'rds_insights_all_regions_{timestamp}.csv'

        fieldnames = [
            'DBIdentifier', 'Status', 'Role', 'Engine', 'Region', 'Size', 'CPU',
            'Storage', 'ProvisionedIOPS', 'StorageType', 'Multi-AZ', 'VPC', 'GlobalCluster',
            'InstanceType', 'MaximumCapacity', 'MinimumCapacity',
            'PerformanceInsightsEnabled', 'PerformanceInsightsKMSKeyId', 'PerformanceInsightsRetentionPeriod',
            'ServerlessV2ScalingConfiguration', 'AvailabilityZone', 'PreferredMaintenanceWindow',
            'BackupRetentionPeriod', 'MultiAZ', 'PubliclyAccessible', 'VpcSecurityGroups', 'DBSubnetGroupName',
            'ReadReplicaDBClusterIdentifiers',
            'DBClusterIdentifier', 'ClusterStatus', 'ClusterEngine', 'ClusterRegion',
        ]

                    writer.writeheader()

            for data_entry in consolidated_data:
                writer.writerow(data_entry)
                print(f"Exported details for {data_entry.get('DBIdentifier', 'Unknown')}")

        print(f'Completed checking and exporting RDS insights to {consolidated_filename} for all regions.')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()

