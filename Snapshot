import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

def categorize_snapshot(snapshot):
    if snapshot['SnapshotType'] == 'manual':
        return 'Manual'
    elif snapshot['SnapshotType'] == 'automated':
        return 'System Generated'
    elif 'arn:aws:rds:iam::' in snapshot.get('DBSnapshotArn', ''):
        return 'Shared with me'
    elif snapshot['DBSnapshotIdentifier'].startswith('rds:'):
        return 'Backup service'
    elif snapshot.get('Public', False):
        return 'Public'
    else:
        return 'Uncategorized'

def get_snapshot_insights(rds_client, snapshot):
    try:
        insights = {
            'DBSnapshotIdentifier': snapshot['DBSnapshotIdentifier'],
            'DBInstanceIdentifier': snapshot['DBInstanceIdentifier'],
            'SnapshotCreateTime': snapshot['SnapshotCreateTime'],
            'Engine': snapshot['Engine'],
            'AllocatedStorage': snapshot['AllocatedStorage'],
            'Status': snapshot['Status'],
            'SnapshotType': snapshot['SnapshotType'],
            'StorageType': snapshot['StorageType'],
            'Category': categorize_snapshot(snapshot),
        }

        return insights
    except ClientError as e:
        print(f"Error retrieving insights for RDS snapshot {snapshot['DBSnapshotIdentifier']}: {e}")
        return None

def get_cluster_snapshot_attributes(rds_client, cluster_snapshot_identifier):
    try:
        response = rds_client.describe_db_cluster_snapshots(DBClusterSnapshotIdentifier=cluster_snapshot_identifier)
        attributes = response['DBClusterSnapshots'][0].get('Attributes', [])

        return attributes
    except ClientError as e:
        print(f"Error retrieving attributes for RDS cluster snapshot {cluster_snapshot_identifier}: {e}")
        return None

def get_rds_snapshots(rds_client):
    try:
        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')

        # Export RDS snapshots
        filename_snapshots = f'rds_snapshots_{timestamp}.csv'
        fieldnames_snapshots = [
            'DBSnapshotIdentifier',
            'DBInstanceIdentifier',
            'SnapshotCreateTime',
            'Engine',
            'AllocatedStorage',
            'Status',
            'SnapshotType',
            'StorageType',
            'Category',
        ]

        with open(filename_snapshots, 'w', newline='') as csvfile_snapshots:
            writer_snapshots = csv.DictWriter(csvfile_snapshots, fieldnames=fieldnames_snapshots)
            writer_snapshots.writeheader()

            next_token_snapshots = None
            while True:
                # Describe RDS snapshots with pagination
                if next_token_snapshots:
                    response_snapshots = rds_client.describe_db_snapshots(MaxRecords=100, Marker=next_token_snapshots)
                else:
                    response_snapshots = rds_client.describe_db_snapshots(MaxRecords=100)

                all_snapshots = response_snapshots['DBSnapshots']

                for snapshot in all_snapshots:
                    insights = get_snapshot_insights(rds_client, snapshot)
                    if insights:
                        writer_snapshots.writerow(insights)
                        print(f"Exported details for RDS snapshot: {insights['DBSnapshotIdentifier']}")

                next_token_snapshots = response_snapshots.get('Marker')
                if not next_token_snapshots:
                    break

        print(f'Completed checking and exporting RDS snapshots to {filename_snapshots}.')

        # Export RDS cluster snapshots
        filename_cluster_snapshots = f'rds_cluster_snapshots_{timestamp}.csv'
        fieldnames_cluster_snapshots = [
            'DBClusterSnapshotIdentifier',
            'DBClusterIdentifier',
            'SnapshotCreateTime',
            'Engine',
            'AllocatedStorage',
            'Status',
            'SnapshotType',
            'StorageType',
            'Category',
            'AdditionalAttributes',
        ]

        with open(filename_cluster_snapshots, 'w', newline='') as csvfile_cluster_snapshots:
            writer_cluster_snapshots = csv.DictWriter(csvfile_cluster_snapshots, fieldnames=fieldnames_cluster_snapshots)
            writer_cluster_snapshots.writeheader()

            next_token_cluster_snapshots = None
            while True:
                # Describe RDS cluster snapshots with pagination
                if next_token_cluster_snapshots:
                    response_cluster_snapshots = rds_client.describe_db_cluster_snapshots(MaxRecords=100, Marker=next_token_cluster_snapshots)
                else:
                    response_cluster_snapshots = rds_client.describe_db_cluster_snapshots(MaxRecords=100)

                all_cluster_snapshots = response_cluster_snapshots['DBClusterSnapshots']

                for cluster_snapshot in all_cluster_snapshots:
                    insights_cluster = {
                        'DBClusterSnapshotIdentifier': cluster_snapshot['DBClusterSnapshotIdentifier'],
                        'DBClusterIdentifier': cluster_snapshot['DBClusterIdentifier'],
                        'SnapshotCreateTime': cluster_snapshot['SnapshotCreateTime'],
                        'Engine': cluster_snapshot['Engine'],
                        'AllocatedStorage': cluster_snapshot['AllocatedStorage'],
                        'Status': cluster_snapshot['Status'],
                        'SnapshotType': cluster_snapshot['SnapshotType'],
                        'StorageType': cluster_snapshot.get('StorageType', 'Not Configured'),
                        'Category': categorize_snapshot(cluster_snapshot),
                        'AdditionalAttributes': get_cluster_snapshot_attributes(rds_client, cluster_snapshot['DBClusterSnapshotIdentifier']),
                    }

                    writer_cluster_snapshots.writerow(insights_cluster)
                    print(f"Exported details for RDS cluster snapshot: {insights_cluster['DBClusterSnapshotIdentifier']}")

                next_token_cluster_snapshots = response_cluster_snapshots.get('Marker')
                if not next_token_cluster_snapshots:
                    break

        print(f'Completed checking and exporting RDS cluster snapshots to {filename_cluster_snapshots}.')

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    # Replace 'your-region' with your actual AWS region
    region = 'us-east-1'
    rds_client = boto3.client('rds', region_name=region)

    # Export RDS Snapshots
    get_rds_snapshots(rds_client)
