import boto3
import csv
from datetime import datetime
from botocore.exceptions import ClientError

def get_snapshot_insights(rds_client, snapshot):
    try:
        insights = {
            'DBSnapshotIdentifier': snapshot['DBSnapshotIdentifier'],
            'DBInstanceIdentifier': snapshot['DBInstanceIdentifier'],
            'SnapshotCreateTime': snapshot['SnapshotCreateTime'],
            'Engine': snapshot['Engine'],
            'AllocatedStorage': snapshot['AllocatedStorage'],
            'Status': snapshot['Status'],
            'SnapshotType': snapshot['SnapshotType'],
            'StorageType': snapshot['StorageType'],
        }

        return insights
    except ClientError as e:
        print(f"Error retrieving insights for RDS snapshot {snapshot['DBSnapshotIdentifier']}: {e}")
        return None

def get_rds_snapshots(rds_client):
    try:
        response_snapshots = rds_client.describe_db_snapshots()
        snapshots = response_snapshots['DBSnapshots']

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename = f'rds_snapshots_{timestamp}.csv'

        fieldnames = [
            'DBSnapshotIdentifier',
            'DBInstanceIdentifier',
            'SnapshotCreateTime',
            'Engine',
            'AllocatedStorage',
            'Status',
            'SnapshotType',
            'StorageType',
        ]

        with open(filename, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for snapshot in snapshots:
                insights = get_snapshot_insights(rds_client, snapshot)
                if insights:
                    writer.writerow(insights)
                    print(f"Exported details for RDS snapshot: {insights['DBSnapshotIdentifier']}")

        print(f'Completed checking and exporting RDS snapshots to {filename}.')
    except Exception as e:
        print(f"An error occurred: {e}")

def main():
    try:
        # Replace 'your-region' with your AWS region
        region = 'us-east-1'
        rds_client = boto3.client('rds', region_name=region)

        # Export RDS Instances and Clusters
        response_instances = rds_client.describe_db_instances()
        instances = response_instances['DBInstances']

        response_clusters = rds_client.describe_db_clusters()
        clusters = response_clusters['DBClusters']

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        filename_instances_clusters = f'rds_insights_{region}_{timestamp}.csv'

        fieldnames_instances_clusters = [
            'DBIdentifier', 'Status', 'Role', 'Engine', 'Region', 'Size', 'CPU',
            'ProvisionedIOPS', 'StorageType', 'Multi-AZ', 'GlobalCluster',
            'InstanceType', 'PerformanceInsightsEnabled', 'PerformanceInsightsKMSKeyId',
            'PerformanceInsightsRetentionPeriod', 'ServerlessV2ScalingConfiguration',
            'AvailabilityZone', 'PreferredMaintenanceWindow', 'BackupRetentionPeriod',
            'MultiAZ', 'PubliclyAccessible', 'VpcSecurityGroups', 'DBSubnetGroupName',
            'ReadReplicaDBClusterIdentifiers',
            'DBClusterIdentifier', 'ClusterStatus', 'ClusterEngine', 'ClusterRegion',
        ]

        with open(filename_instances_clusters, 'w', newline='') as csvfile_instances_clusters:
            writer_instances_clusters = csv.DictWriter(csvfile_instances_clusters, fieldnames=fieldnames_instances_clusters)
            writer_instances_clusters.writeheader()

            for instance in instances:
                insights = get_rds_insights(rds_client, instance['DBInstanceIdentifier'])
                if insights:
                    writer_instances_clusters.writerow(insights)
                    print(f"Exported details for RDS instance: {insights['DBIdentifier']}")

            for cluster in clusters:
                cluster_info = get_db_cluster_info(rds_client, cluster['DBClusterIdentifier'])
                if cluster_info:
                    writer_instances_clusters.writerow(cluster_info)
                    print(f"Exported details for RDS cluster: {cluster_info['DBClusterIdentifier']}")

        print(f'Completed checking and exporting RDS instances and clusters to {filename_instances_clusters}.')

        # Export RDS Snapshots
        get_rds_snapshots(rds_client)

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
