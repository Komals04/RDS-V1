import boto3
import csv

def categorize_snapshot(snapshot):
    # Categorize the snapshot based on attributes
    if snapshot['SnapshotType'] == 'manual':
        return 'Manual'
    elif 'arn:aws:rds:iam::' in snapshot.get('DBSnapshotArn', ''):
        return 'Shared with me'
    elif snapshot['DBSnapshotIdentifier'].startswith('awsbackup:'):
        return 'Backup service'
    elif snapshot['DBSnapshotIdentifier'].startswith('rds:'):
        return 'System'
    elif snapshot.get('PubliclyAccessible', False):
        return 'Public'
    elif snapshot.get('Exported', False):
        return 'Exports in Amazon S3'
    else:
        return 'Uncategorized'

def get_rds_snapshots():
    # Get a list of AWS regions
    regions = [region['RegionName'] for region in boto3.client('ec2').describe_regions()['Regions']]

    # Specify the attributes you want in the CSV file
    attributes_to_export = [
        'DBSnapshotIdentifier',
        'DBInstanceIdentifier',
        'SnapshotCreateTime',
        'Engine',
        'AllocatedStorage',
        'Status',
        'SnapshotType',
        'StorageType'
    ]

    # Additional categories
    categories = [
        'Category'
    ]

    # Write results to CSV file
    with open('snapshots.csv', 'w', newline='') as csvfile:
        csv_writer = csv.writer(csvfile)

        # Write header
        csv_writer.writerow(attributes_to_export + categories)

        # Iterate over each region
        for region in regions:
            print(f"Fetching RDS snapshots in region: {region}")

            # Initialize RDS client for the specific region
            rds_region = boto3.client('rds', region_name=region)

            # Describe RDS snapshots
            response = rds_region.describe_db_snapshots()

            # Write data
            for snapshot in response['DBSnapshots']:
                # Extract only the specified attributes
                row_data = [snapshot[attr] for attr in attributes_to_export]

                # Categorize the snapshot
                category = categorize_snapshot(snapshot)
                row_data.append(category)

                # Write the row to the CSV file
                csv_writer.writerow(row_data)

if __name__ == "__main__":
    get_rds_snapshots()



Traceback (most recent call last):
  File "C:\Users\ux186612\Documents\Snapshot.py", line 72, in <module>
    get_rds_snapshots()
  File "C:\Users\ux186612\Documents\Snapshot.py", line 23, in get_rds_snapshots
    regions = [region['RegionName'] for region in boto3.client('ec2').describe_regions()['Regions']]
  File "C:\Program Files\Python310\lib\site-packages\boto3\__init__.py", line 92, in client
    return _get_default_session().client(*args, **kwargs)
  File "C:\Program Files\Python310\lib\site-packages\boto3\session.py", line 299, in client
    return self._session.create_client(
  File "C:\Program Files\Python310\lib\site-packages\botocore\session.py", line 997, in create_client
    client = client_creator.create_client(
  File "C:\Program Files\Python310\lib\site-packages\botocore\client.py", line 161, in create_client
    client_args = self._get_client_args(
  File "C:\Program Files\Python310\lib\site-packages\botocore\client.py", line 508, in _get_client_args
    return args_creator.get_client_args(
  File "C:\Program Files\Python310\lib\site-packages\botocore\args.py", line 100, in get_client_args
    final_args = self.compute_client_args(
  File "C:\Program Files\Python310\lib\site-packages\botocore\args.py", line 219, in compute_client_args
    endpoint_config = self._compute_endpoint_config(
  File "C:\Program Files\Python310\lib\site-packages\botocore\args.py", line 369, in _compute_endpoint_config
    return self._resolve_endpoint(**resolve_endpoint_kwargs)
  File "C:\Program Files\Python310\lib\site-packages\botocore\args.py", line 474, in _resolve_endpoint
    return endpoint_bridge.resolve(
  File "C:\Program Files\Python310\lib\site-packages\botocore\client.py", line 613, in resolve
    resolved = self.endpoint_resolver.construct_endpoint(
  File "C:\Program Files\Python310\lib\site-packages\botocore\regions.py", line 229, in construct_endpoint
    result = self._endpoint_for_partition(
  File "C:\Program Files\Python310\lib\site-packages\botocore\regions.py", line 277, in _endpoint_for_partition
    raise NoRegionError()
botocore.exceptions.NoRegionError: You must specify a region.
