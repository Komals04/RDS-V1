import csv
import boto3
from botocore.exceptions import ClientError

def get_rds_insights():
    # Specify your AWS region
    aws_region = 'us-east-2'

    # Create an RDS client
    rds_client = boto3.client('rds', region_name=aws_region)

    # Initialize an empty list to store RDS insights
    rds_insights = []

    try:
        # Retrieve a list of RDS instances
        response = rds_client.describe_db_instances()
        instances = response['DBInstances']

        # Iterate through each RDS instance
        for instance in instances:
            # Extract relevant information
            instance_id = instance['DBInstanceIdentifier']
            instance_class = instance['DBInstanceClass']
            engine = instance['Engine']
            engine_version = instance['EngineVersion']
            multi_az = instance['MultiAZ']
            iops = instance.get('Iops', 'N/A')
            storage_type = instance['StorageType']
            allocated_storage = instance['AllocatedStorage']
            security_groups = [group['VpcSecurityGroupId'] for group in instance['VpcSecurityGroups']]
            autoscaling = instance.get('AutoMinorVersionUpgrade', 'N/A')

            # Append instance details to the list
            rds_insights.append([
                instance_id, instance_class, engine, engine_version, multi_az, iops,
                storage_type, allocated_storage, security_groups, autoscaling
            ])

    except ClientError as e:
        print(f"Error: {e}")
        # Log the error or take appropriate action based on your requirements
        # logger.error(f"Error: {e}")

    return rds_insights

def save_to_csv(data, filename='rds_insights.csv'):
    try:
        with open(filename, 'w', newline='') as csvfile:
            csv_writer = csv.writer(csvfile)
            
            # Write header
            header = ['DBInstanceIdentifier', 'DBInstanceClass', 'Engine', 'EngineVersion',
                      'MultiAZ', 'Iops', 'StorageType', 'AllocatedStorage', 'SecurityGroups',
                      'AutoScaling']
            csv_writer.writerow(header)
            
            # Write data
            csv_writer.writerows(data)
            
        print(f"CSV file '{filename}' created successfully.")
        
    except Exception as e:
        print(f"Error saving to CSV: {e}")
        # Log the error or take appropriate action based on your requirements
        # logger.error(f"Error saving to CSV: {e}")

if __name__ == "__main__":
    rds_info = get_rds_insights()
    save_to_csv(rds_info)
